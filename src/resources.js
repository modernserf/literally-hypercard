import { createPattern } from "./buffer"

const X = 1
const _ = 0

export const brushes = [
    [
        [X],
    ],
    [
        [X,X],
        [X,X],
    ],
    [
        [X,X,X,X],
        [X,X,X,X],
        [X,X,X,X],
        [X,X,X,X],
    ],
    [
        [_,X,X,_],
        [X,X,X,X],
        [X,X,X,X],
        [_,X,X,_]
    ],
    [
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
    ],
    [
        [_,_,_,X,X,_,_,_],
        [_,X,X,X,X,X,X,_],
        [_,X,X,X,X,X,X,_],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [_,X,X,X,X,X,X,_],
        [_,X,X,X,X,X,X,_],
        [_,_,_,X,X,_,_,_],
    ],
    [
        [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,X,X,X,_,_,_,_,_,_],
        [_,_,_,_,_,X,X,X,X,X,X,X,_,_,_,_],
        [_,_,_,_,X,X,X,X,X,X,X,X,X,_,_,_],
        [_,_,_,_,X,X,X,X,X,X,X,X,X,_,_,_],
        [_,_,_,X,X,X,X,X,X,X,X,X,X,X,_,_],
        [_,_,_,X,X,X,X,X,X,X,X,X,X,X,_,_],
        [_,_,_,X,X,X,X,X,X,X,X,X,X,X,_,_],
        [_,_,_,_,X,X,X,X,X,X,X,X,X,_,_,_],
        [_,_,_,_,X,X,X,X,X,X,X,X,X,_,_,_],
        [_,_,_,_,_,X,X,X,X,X,X,X,_,_,_,_],
        [_,_,_,_,_,_,_,X,X,X,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],
    ],
].map(createPattern)


function tileOffset (tile) {
    const x = tile < 0 ? -tile : 0
    const y = tile > 0 ? tile : 0
    return { x, y }
}

// xFreq / yFreq : 2 4 8
// tile: -7 -- 7
// pixels: 8x8


function genPattern (pixels, { xFreq, yFreq, tile }) {
    const t = tileOffset(tile)

    const out = []
    for (let y = 0; y < 8; y++) {
        const yBlock = y / yFreq | 0
        const yOffset = yBlock * t.y
        const row = []
        for (let x = 0; x < 8; x++) {
            const xBlock = x / xFreq | 0
            const xOffset = xBlock * t.x
            const px = pixels[y][x]
            row.push(px)
        }
        out.push(row)
    }
    return out
}

export const patterns = [
    [
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
    ],
    [
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
    [
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
    [
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
    [
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
        [X,X,X,X,X,X,X,X],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
        [_,X,_,X,_,X,_,X],
        [X,_,X,_,X,_,X,_],
    ],
    [
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
        [_,_,_,_,X,_,X,_],
        [X,_,X,_,_,_,_,_],
        [_,_,_,_,_,X,_,X],
        [_,X,_,X,_,_,_,_],
    ],
    [
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
        [_,_,X,_,_,_,X,_],
        [_,_,_,_,_,_,_,_],
        [X,_,_,_,X,_,_,_],
        [_,_,_,_,_,_,_,_],
    ],
    [
        [X,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,X,_,_],
        [_,_,_,_, _,_,_,_],

        [_,_,X,_, _,_,_,_],
        [_,_,_,_, _,_,_,_],
        [_,_,_,_, _,_,_,X],
        [_,_,_,_, _,_,_,_],
    ],
].map(createPattern)
